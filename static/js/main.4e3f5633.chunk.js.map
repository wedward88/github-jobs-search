{"version":3,"sources":["img/GitHub_Logo.png","components/Header.jsx","components/JobForm.jsx","components/JobResults.jsx","components/JobExplorer.jsx","App.js","index.js"],"names":["module","exports","href","target","rel","src","GitHugImg","alt","height","JobForm","props","handleSubmit","e","page","preventDefault","state","description","location","fullTime","saveResults","url","fullQuery","fetch","then","res","json","data","currentSearch","currentPage","field","this","setState","prevState","value","onSubmit","type","onChange","handleChange","placeholder","className","onClick","React","Component","JobResults","active","Set","id","has","newActive","delete","add","results","changePage","length","map","listing","key","toggleActive","title","company_logo","company_url","dangerouslySetInnerHTML","__html","how_to_apply","JobExplorer","currentUrl","direction","newPage","Header","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4e3f5633.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/GitHub_Logo.cefc2023.png\";","import React from 'react';\nimport GitHugImg from '../img/GitHub_Logo.png';\n\nexport default () => {\n    return (\n        <header>\n            <a \n            href=\"https://www.github.com\" \n            target=\"_blank\" \n            rel=\"noopener noreferrer\"\n            >\n                <img src={GitHugImg} alt=\"github-logo\" height=\"40\" />\n            </a>\n            <h1>Job Explorer</h1>\n        </header>\n    )\n}","import React from 'react';\n\nclass JobForm extends React.Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            description: '',\n            location: '',\n            fullTime: false,\n            currentSearch: null,\n            currentPage: null\n        }\n    }\n\n    handleSubmit = (e, page) => {\n        e.preventDefault();\n        const { description, location, fullTime } = this.state;\n        const { saveResults } = this.props;\n\n        // Interpolates the relevant fields into the query string, and sends a GET request to the API\n        const url = `https://jobs.github.com/positions.json?description=${description}&location=${location}&full_time=${fullTime}`;\n\n        const fullQuery = `https://cors-anywhere.herokuapp.com/${url}&page=${page}`\n\n        fetch(fullQuery)\n            .then(res => res.json())\n            .then(data => {\n                saveResults(data, url, page);\n            })\n    }\n\n\n    handleChange (e, field) {\n\n        // Checks if the field is the checkbox, if so, toggles the checkbox.\n        // Otherwise, it updates the text input field state\n\n        if (field === 'fullTime') {\n            this.setState(prevState => {\n                return { fullTime: !prevState.fullTime, }\n            })\n        } else {\n            this.setState({ [field]: e.target.value });\n        }\n    }\n\n    render () {\n\n        const { \n            description,\n            location,\n            fullTime \n        } = this.state;\n\n        return (\n            <form onSubmit={(e) => this.handleSubmit(e, 1)}>\n                <input \n                    type=\"search\"\n                    value={description}\n                    onChange={(e)=>this.handleChange(e, 'description')}\n                    placeholder=\"Enter job search term (React, JavaScript, etc...)\" \n                />\n                <input \n                    type=\"search\"\n                    value={location}\n                    onChange={(e)=>this.handleChange(e, 'location')} \n                    placeholder=\"Enter search location...\"\n                />\n                <div className=\"check-box\">\n                    <input \n                        type=\"checkbox\"\n                        value={fullTime}\n                        onChange={(e) => this.handleChange(e, 'fullTime')}  \n                    />\n                    <label>Limit results to full-time positions</label>\n                </div>\n                <button onClick={(e) => this.handleSubmit(e, 1)}>Submit</button>\n            </form>\n        )\n    }\n}\n\nexport default JobForm;","import React from 'react';\n\n\nclass JobResults extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            active: new Set(),\n        }\n    }\n\n    toggleActive (id) {\n        // Checks if the listing ID is in the active state, if it is, it removes it. If it isn't, it adds it.\n        // This allows to have multiple list items expanded at once\n\n        let currentActive = this.state.active;\n\n        if (currentActive.has(id)) {\n            // removes from active state\n            this.setState(prevState => {\n                const newActive = new Set(prevState.active);\n                newActive.delete(id);\n                return { active: newActive }\n            });\n        } else {\n            // adds to active state\n            this.setState(prevState => {\n                return { active: new Set(prevState.active).add(id) }\n            })\n        }\n    }\n\n    render () {\n        const { results, changePage, currentPage } = this.props;\n        const { active } = this.state;\n        \n        return (\n            <>\n                {results.length ? \n                    <section className=\"job-results\">\n                        <div className=\"section-head\">\n                            <h1>Page {currentPage}</h1>\n                            <div className=\"nav-buttons\">\n                                {/* Currently shows the next button unless there's less than 50 results, indicating the end of results.\n                                    This would only be an issue if the number of results was a multiple of 50 */}\n                                { currentPage > 1 ? <button onClick={() => changePage('back')}>Previous</button> : null }\n                                { results.length < 50 ? null : <button onClick={() => changePage('next')}>Next</button> }\n                            </div>\n                        </div>\n                        <ul className=\"results-list\">\n                            {results.map(listing => {\n                                return (\n                                    <li\n                                        key={listing.id}\n                                        className={active.has(listing.id) ? \"listing active-listing\" : \"listing inactive-listing\"}\n                                    >\n                                        <h2 onClick={() => this.toggleActive(listing.id)}>\n                                            {listing.title}\n                                        </h2>\n                                        {active.has(listing.id) ? (\n                                            <>\n                                                {listing.company_logo ? <a href={listing.company_url} target=\"_blank\" rel=\"noopener noreferrer\"><img alt=\"company-logo\" src={listing.company_logo} /></a> : null}\n                                                <div className=\"listing-details\" dangerouslySetInnerHTML={{ __html: listing.description }} />\n                                                <h3>How to Apply:</h3>\n                                                <div className=\"listing-apply\" dangerouslySetInnerHTML={{ __html: listing.how_to_apply }} />\n                                            </>\n                                        ) : null}\n                                    </li>\n                                )\n                            })\n                            }\n                        </ul>\n                    </section> : null }\n            </>\n        )\n    }\n}\n\nexport default JobResults;","import React from 'react';\nimport Header from './Header';\nimport JobForm from './JobForm';\nimport JobResults from './JobResults';\n\nclass JobExplorer extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            results: [],\n            currentPage: null,\n            currentUrl: null,\n        };\n    }\n\n\n    saveResults = (results, url, page) => {\n        this.setState({\n            results,\n            currentUrl: url,\n            currentPage: page,\n        })\n    }\n\n    changePage = (direction) => {      \n        const { currentPage , currentUrl} = this.state;\n        let newPage;\n\n        // increments the current page by 1, or decrements by 1\n        if (direction === 'next'){\n            newPage = currentPage + 1;\n        } else if (direction === 'back'){\n            newPage = currentPage - 1;\n        }\n\n        // Interpolates the relevant fields into a new query string, and sends a GET request to the API,\n        // then sets the state with the new data\n        // The below URL is proxied through cors-anywhere to resolve a CORS issue with the GitHub Jobs API\n        const fullQuery = `https://cors-anywhere.herokuapp.com/${currentUrl}&page=${newPage}`\n\n        fetch(fullQuery)\n            .then(res => res.json())\n            .then(data => {\n                this.saveResults(data, currentUrl, newPage);\n            })\n    }\n\n    render () {\n        const { currentPage, currentUrl } = this.state;\n        return (\n            <>\n                <Header />\n                <JobForm saveResults={this.saveResults} />\n                <JobResults \n                    results={this.state.results} \n                    currentPage={currentPage}\n                    changePage={this.changePage} \n                    currentUrl={currentUrl}\n                />\n            </>\n        )\n    }\n}\n\nexport default JobExplorer;","import React from 'react';\nimport './style/app.css';\nimport './style/form.css';\nimport './style/job-results.css';\nimport JobExplorer from './components/JobExplorer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <JobExplorer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/reset.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}